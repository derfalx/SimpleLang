# Generated from C:/Users/falx/PycharmProjects/SimpleLang\SimpleLang.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,136,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,
        71,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,
        1,16,1,17,4,17,100,8,17,11,17,12,17,101,1,18,1,18,1,19,1,19,1,20,
        3,20,109,8,20,1,20,4,20,112,8,20,11,20,12,20,113,1,21,3,21,117,8,
        21,1,21,4,21,120,8,21,11,21,12,21,121,1,21,1,21,4,21,126,8,21,11,
        21,12,21,127,1,22,4,22,131,8,22,11,22,12,22,132,1,22,1,22,0,0,23,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,0,41,20,43,21,45,22,1,0,4,
        1,0,97,122,1,0,48,57,2,0,43,43,45,45,3,0,9,10,13,13,32,32,142,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,51,1,0,0,0,7,53,1,
        0,0,0,9,55,1,0,0,0,11,57,1,0,0,0,13,59,1,0,0,0,15,63,1,0,0,0,17,
        70,1,0,0,0,19,72,1,0,0,0,21,75,1,0,0,0,23,80,1,0,0,0,25,86,1,0,0,
        0,27,88,1,0,0,0,29,91,1,0,0,0,31,93,1,0,0,0,33,96,1,0,0,0,35,99,
        1,0,0,0,37,103,1,0,0,0,39,105,1,0,0,0,41,108,1,0,0,0,43,116,1,0,
        0,0,45,130,1,0,0,0,47,48,5,43,0,0,48,2,1,0,0,0,49,50,5,45,0,0,50,
        4,1,0,0,0,51,52,5,42,0,0,52,6,1,0,0,0,53,54,5,47,0,0,54,8,1,0,0,
        0,55,56,5,40,0,0,56,10,1,0,0,0,57,58,5,41,0,0,58,12,1,0,0,0,59,60,
        5,97,0,0,60,61,5,110,0,0,61,62,5,100,0,0,62,14,1,0,0,0,63,64,5,111,
        0,0,64,65,5,114,0,0,65,16,1,0,0,0,66,67,5,110,0,0,67,68,5,111,0,
        0,68,71,5,116,0,0,69,71,5,33,0,0,70,66,1,0,0,0,70,69,1,0,0,0,71,
        18,1,0,0,0,72,73,5,61,0,0,73,74,5,61,0,0,74,20,1,0,0,0,75,76,5,116,
        0,0,76,77,5,114,0,0,77,78,5,117,0,0,78,79,5,101,0,0,79,22,1,0,0,
        0,80,81,5,102,0,0,81,82,5,97,0,0,82,83,5,108,0,0,83,84,5,115,0,0,
        84,85,5,101,0,0,85,24,1,0,0,0,86,87,5,60,0,0,87,26,1,0,0,0,88,89,
        5,60,0,0,89,90,5,61,0,0,90,28,1,0,0,0,91,92,5,62,0,0,92,30,1,0,0,
        0,93,94,5,62,0,0,94,95,5,61,0,0,95,32,1,0,0,0,96,97,5,61,0,0,97,
        34,1,0,0,0,98,100,7,0,0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,
        0,0,0,101,102,1,0,0,0,102,36,1,0,0,0,103,104,5,59,0,0,104,38,1,0,
        0,0,105,106,7,1,0,0,106,40,1,0,0,0,107,109,7,2,0,0,108,107,1,0,0,
        0,108,109,1,0,0,0,109,111,1,0,0,0,110,112,3,39,19,0,111,110,1,0,
        0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,42,1,0,0,
        0,115,117,7,2,0,0,116,115,1,0,0,0,116,117,1,0,0,0,117,119,1,0,0,
        0,118,120,3,39,19,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,
        0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,125,5,46,0,0,124,126,3,39,
        19,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,
        0,0,128,44,1,0,0,0,129,131,7,3,0,0,130,129,1,0,0,0,131,132,1,0,0,
        0,132,130,1,0,0,0,132,133,1,0,0,0,133,134,1,0,0,0,134,135,6,22,0,
        0,135,46,1,0,0,0,9,0,70,101,108,113,116,121,127,132,1,6,0,0
    ]

class SimpleLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ADD = 1
    SUB = 2
    MUL = 3
    DIV = 4
    LP = 5
    RP = 6
    AND = 7
    OR = 8
    NOT = 9
    EQUALS = 10
    TRUE = 11
    FALSE = 12
    LESS_THAN = 13
    LESS_EQ_THAN = 14
    GREATER_THAN = 15
    GREATER_EQ_THAN = 16
    ASSIGN = 17
    ID = 18
    SEMICOLON = 19
    NUMBER = 20
    FLOAT = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'and'", "'or'", "'=='", 
            "'true'", "'false'", "'<'", "'<='", "'>'", "'>='", "'='", "';'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "SUB", "MUL", "DIV", "LP", "RP", "AND", "OR", "NOT", 
            "EQUALS", "TRUE", "FALSE", "LESS_THAN", "LESS_EQ_THAN", "GREATER_THAN", 
            "GREATER_EQ_THAN", "ASSIGN", "ID", "SEMICOLON", "NUMBER", "FLOAT", 
            "WS" ]

    ruleNames = [ "ADD", "SUB", "MUL", "DIV", "LP", "RP", "AND", "OR", "NOT", 
                  "EQUALS", "TRUE", "FALSE", "LESS_THAN", "LESS_EQ_THAN", 
                  "GREATER_THAN", "GREATER_EQ_THAN", "ASSIGN", "ID", "SEMICOLON", 
                  "DIGIT", "NUMBER", "FLOAT", "WS" ]

    grammarFileName = "SimpleLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


